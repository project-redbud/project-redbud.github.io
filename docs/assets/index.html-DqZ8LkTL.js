import{_ as n,r as t,c as l,a as s,d as i,b as h,w as d,e as a,o as p}from"./app-k4uPTofk.js";const k={},r=a(`<p>本介绍 <code>FunGameServer</code> 如何处理客户端发送的连接请求。</p><div class="hint-container tip"><p class="hint-container-title">提示</p><p>本文档适用于 <code>Socket</code> 和 <code>WebSocket</code> 模式。</p></div><h3 id="_1-主要流程" tabindex="-1"><a class="header-anchor" href="#_1-主要流程"><span>1. <strong>主要流程</strong></span></a></h3><ol><li>服务器监听客户端请求。</li><li>客户端通过 WebSocket 发送 <code>SocketObject</code> 作为请求体。</li><li>服务器解析 <code>SocketObject</code> 中的参数，判断连接条件是否满足。</li><li>返回连接状态：成功或拒绝。</li></ol><h3 id="_2-请求体" tabindex="-1"><a class="header-anchor" href="#_2-请求体"><span>2. <strong>请求体</strong></span></a></h3><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">socketType</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">token</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">00000000-0000-0000-0000-000000000000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">parameters</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    [</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">      &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ModA</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">ModB</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">    ],</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    true</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),o=s("li",null,[s("p",null,[s("code",null,"socketType"),i(": 1 表示连接请求。")])],-1),c=s("li",null,[s("p",null,[s("code",null,"token"),i(": 连接成功后，服务器会返回 "),s("code",null,"OpenToken"),i("，在这之后客户端每次请求都要附带这个 token，本次是连接服务器，没有 token，因此需要传入 "),s("code",null,"Guid.Empty"),i("。")])],-1),g=s("code",null,"[Server]",-1),u=s("code",null,"UseDesktopParameters",-1),y=s("code",null,"true",-1),m=s("code",null,"parameters",-1),v=a(`<ol><li><code>parameters[0]</code>: 客户端所安装的游戏模组列表。</li><li><code>parameters[1]</code>: 客户端是否启用开发者模式。</li></ol><h3 id="_3-连接流程解析" tabindex="-1"><a class="header-anchor" href="#_3-连接流程解析"><span>3. <strong>连接流程解析</strong></span></a></h3><h4 id="服务端接收与处理" tabindex="-1"><a class="header-anchor" href="#服务端接收与处理"><span><strong>服务端接收与处理</strong></span></a></h4><ul><li><p>服务器只有在接收到服务器发送的 <code>SocketObject.SocketType</code> 为 <code>Connect</code> 时，服务器才开始处理连接。</p></li><li><p>服务器将检查客户端是否满足连接条件，如客户端游戏模组与服务器的兼容性、IP 是否在黑名单中等。</p></li></ul><h4 id="条件判断" tabindex="-1"><a class="header-anchor" href="#条件判断"><span><strong>条件判断</strong></span></a></h4><ul><li>如果客户端的模组列表缺少服务器所需模组，则连接被拒绝。</li><li>如果客户端开启了开发者模式，服务器会记录并显示该信息。</li><li>如果客户端的 IP 在服务器的黑名单中，则连接被拒绝。</li></ul><h3 id="_4-返回结果解析" tabindex="-1"><a class="header-anchor" href="#_4-返回结果解析"><span>4. <strong>返回结果解析</strong></span></a></h3><p>根据连接判断结果，服务器会返回相应的消息，表明连接是否成功。</p><h4 id="成功连接" tabindex="-1"><a class="header-anchor" href="#成功连接"><span><strong>成功连接</strong></span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">socketType</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">token</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">00000000-0000-0000-0000-000000000000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">parameters</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    true</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 连接状态：成功</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 表示无错误信息</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">3fa85f64-5717-4562-b3fc-2c963f66afa6</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 客户端的 OpenToken</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">FunGame Server</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 服务器名称</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">This is a notice.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 服务器公告或通知</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th><strong>参数</strong></th><th><strong>类型</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>Parameters[0]</td><td><code>bool</code></td><td>指示连接结果，<code>true</code> 表示连接成功，<code>false</code> 表示失败</td></tr><tr><td>Parameters[1]</td><td><code>string</code></td><td>服务器返回的消息</td></tr><tr><td>Parameters[2]</td><td><code>Guid</code></td><td>客户端的 OpenToken，从下次请求开始，客户端都需要发送用于验证</td></tr><tr><td>Parameters[3]</td><td><code>string</code></td><td>服务器的名称，连接成功时返回</td></tr><tr><td>Parameters[4]</td><td><code>string</code></td><td>服务器的公告信息，连接成功时返回</td></tr></tbody></table><h4 id="连接拒绝" tabindex="-1"><a class="header-anchor" href="#连接拒绝"><span><strong>连接拒绝</strong></span></a></h4><div class="language-json line-numbers-mode" data-ext="json" data-title="json"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">{</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">socketType</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#2F798A;--shiki-dark:#4C9A91;"> 1</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">token</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;"> &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">00000000-0000-0000-0000-000000000000</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span></span>
<span class="line"><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">  &quot;</span><span style="--shiki-light:#998418;--shiki-dark:#B8A965;">parameters</span><span style="--shiki-light:#99841877;--shiki-dark:#B8A96577;">&quot;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">:</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> [</span></span>
<span class="line"><span style="--shiki-light:#1E754F;--shiki-dark:#4D9375;">    false</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">,</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 连接状态：失败</span></span>
<span class="line"><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">    &quot;</span><span style="--shiki-light:#B56959;--shiki-dark:#C98A7D;">Missing required mods.</span><span style="--shiki-light:#B5695977;--shiki-dark:#C98A7D77;">&quot;</span><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;"> // 错误信息</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">  ]</span></span>
<span class="line"><span style="--shiki-light:#999999;--shiki-dark:#666666;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>parameters[0]</code>: <code>false</code> 表示连接失败。</li><li><code>parameters[1]</code>: 返回具体的拒绝原因，如缺少服务器所需模组或 IP 被封禁。</li></ul><h3 id="_5-错误处理" tabindex="-1"><a class="header-anchor" href="#_5-错误处理"><span>5. <strong>错误处理</strong></span></a></h3><p>服务器在处理连接过程中可能会遇到错误，如客户端发送了无效数据或者不符合规范的请求。此时服务器会向客户端返回错误消息并关闭连接。</p>`,16);function A(b,B){const e=t("RouteLink");return p(),l("div",null,[r,s("ul",null,[o,c,s("li",null,[s("p",null,[i("在 "),h(e,{to:"/dev/conifg/"},{default:d(()=>[i("服务器配置文件")]),_:1}),i(" 中，如果 "),g,i(" 节点内的 "),u,i(" 项设置为 "),y,i("，那么 "),m,i(" 需要提供两个参数：")])])]),v])}const _=n(k,[["render",A],["__file","index.html.vue"]]),C=JSON.parse(`{"path":"/dev/architecture/connect/","title":"连接服务器","lang":"en-US","frontmatter":{"title":"连接服务器","author":"Project Redbud","createTime":"2025/03/23 20:01:20","permalink":"/dev/architecture/connect/","prev":"/dev/architecture/","next":"/dev/architecture/token/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":3,"title":"1. 主要流程","slug":"_1-主要流程","link":"#_1-主要流程","children":[]},{"level":3,"title":"2. 请求体","slug":"_2-请求体","link":"#_2-请求体","children":[]},{"level":3,"title":"3. 连接流程解析","slug":"_3-连接流程解析","link":"#_3-连接流程解析","children":[]},{"level":3,"title":"4. 返回结果解析","slug":"_4-返回结果解析","link":"#_4-返回结果解析","children":[]},{"level":3,"title":"5. 错误处理","slug":"_5-错误处理","link":"#_5-错误处理","children":[]}],"readingTime":{"minutes":2.47,"words":742},"git":{"updatedTime":1742734543000,"contributors":[{"name":"milimoe","email":"mili@wrss.org","commits":1}]},"filePathRelative":"dev/architecture/connect.md","categoryList":[{"id":"e77989","sort":10000,"name":"dev"},{"id":"b9252b","sort":10003,"name":"architecture"}]}`);export{_ as comp,C as data};
