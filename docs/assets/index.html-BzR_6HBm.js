import{_ as a,r as s,c as i,a as t,d as e,b as o,w as r,e as c,o as l}from"./app-k4uPTofk.js";const d={},h=c(`<p>本介绍 <code>FunGameServer</code> 或 <code>FunGame Web API</code> 中使用的客户端令牌的定义、获取方式、验证机制等。</p><h2 id="opentoken" tabindex="-1"><a class="header-anchor" href="#opentoken"><span>OpenToken</span></a></h2><p>在 FunGame 中，<strong>OpenToken</strong>（客户端令牌，简称 <code>Token</code>）在请求体中起着关键的作用，负责确保客户端与服务器之间的合法交互。具体的说明如下：</p><h3 id="_1-定义" tabindex="-1"><a class="header-anchor" href="#_1-定义"><span>1. <strong>定义</strong></span></a></h3><p>这是服务器生成并提供给客户端的唯一标识符，验证客户端的操作是否合法。每次与服务器交互时，客户端必须提供正确的 token 以获得服务器的回应。</p><div class="language-cs line-numbers-mode" data-ext="cs" data-title="cs"><button class="copy" title="Copy code" data-copied="Copied"></button><pre class="shiki shiki-themes vitesse-light vitesse-dark vp-code"><code><span class="line"><span style="--shiki-light:#A0ADA0;--shiki-dark:#758575DD;">// ISocketMessageProcessor 接口</span></span>
<span class="line"><span style="--shiki-light:#AB5959;--shiki-dark:#CB7676;">public</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Guid</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> Token</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> {</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> get</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#B07D48;--shiki-dark:#BD976A;"> init</span><span style="--shiki-light:#999999;--shiki-dark:#666666;">;</span><span style="--shiki-light:#999999;--shiki-dark:#666666;"> }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-获取方式" tabindex="-1"><a class="header-anchor" href="#_2-获取方式"><span>2. <strong>获取方式</strong></span></a></h3><ol><li><p><strong>Socket/WebSocket 模式下</strong>：</p><ul><li>客户端首次连接服务器成功后，返回的 JSON 中便包含这个 token 值，客户端要保存到对应的 <code>ISocketMessageProcessor</code> 接口对象中。</li></ul></li><li><p><strong>RESTful API 模式下</strong>：</p><ul><li>客户端通过调用 <code>/user/login/</code> 接口进行账号登录，登录成功后服务器会返回 <code>BearerToken</code> 和 <code>OpenToken</code>。</li></ul></li></ol><div class="hint-container tip"><p class="hint-container-title">提示</p><p>在 RESTful API 模式下， <code>OpenToken</code> 是作兼容性保留，只有调用 <code>/adapter</code> 接口（使用 <code>SocketObject</code> 为请求体）请求时，才需要验证 <code>OpenToken</code>。</p></div><h2 id="bearertoken" tabindex="-1"><a class="header-anchor" href="#bearertoken"><span>BearerToken</span></a></h2><p>在 <strong>RESTful API</strong> 模式下，客户端与服务器之间的通信通过 <strong>BearerToken</strong> 进行验证。BearerToken 是一种用于验证用户身份的令牌，由服务器生成并返回给客户端，客户端在每次请求时都要携带这个令牌。</p><h3 id="_1-定义-1" tabindex="-1"><a class="header-anchor" href="#_1-定义-1"><span>1. <strong>定义</strong></span></a></h3><p>BearerToken 在本系统中全称 <code>JWT Bearer Token</code>，是一个字符串，由服务器生成并返回给客户端，用于验证客户端的身份。</p><h3 id="_2-获取方式-1" tabindex="-1"><a class="header-anchor" href="#_2-获取方式-1"><span>2. <strong>获取方式</strong></span></a></h3><p>客户端通过调用 <code>/user/login/</code> 接口进行账号登录，登录成功后服务器会返回 <code>BearerToken</code> 和 <code>OpenToken</code>。</p>`,15);function p(k,u){const n=s("RouteLink");return l(),i("div",null,[h,t("blockquote",null,[t("p",null,[e("有关此部分返回体的详细内容，参见 "),o(n,{to:"/api/user/login/"},{default:r(()=>[e("账号管理 | 登录")]),_:1}),e("。")])])])}const g=a(d,[["render",p],["__file","index.html.vue"]]),v=JSON.parse(`{"path":"/dev/architecture/token/","title":"客户端令牌","lang":"en-US","frontmatter":{"title":"客户端令牌","author":"Project Redbud","createTime":"2025/03/23 20:01:20","permalink":"/dev/architecture/token/","prev":"/dev/architecture/connect/","next":"/dev/architecture/transmittal/","head":[["script",{"id":"check-dark-mode"},";(function () {const um= localStorage.getItem('vuepress-theme-appearance') || 'auto';const sm = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;if (um === 'dark' || (um !== 'light' && sm)) {document.documentElement.classList.add('dark');}})();"],["script",{"id":"check-mac-os"},"document.documentElement.classList.toggle('mac', /Mac|iPhone|iPod|iPad/i.test(navigator.platform))"]]},"headers":[{"level":2,"title":"OpenToken","slug":"opentoken","link":"#opentoken","children":[{"level":3,"title":"1. 定义","slug":"_1-定义","link":"#_1-定义","children":[]},{"level":3,"title":"2. 获取方式","slug":"_2-获取方式","link":"#_2-获取方式","children":[]}]},{"level":2,"title":"BearerToken","slug":"bearertoken","link":"#bearertoken","children":[{"level":3,"title":"1. 定义","slug":"_1-定义-1","link":"#_1-定义-1","children":[]},{"level":3,"title":"2. 获取方式","slug":"_2-获取方式-1","link":"#_2-获取方式-1","children":[]}]}],"readingTime":{"minutes":1.57,"words":471},"git":{"updatedTime":1742734543000,"contributors":[{"name":"milimoe","email":"mili@wrss.org","commits":1}]},"filePathRelative":"dev/architecture/token.md","categoryList":[{"id":"e77989","sort":10000,"name":"dev"},{"id":"b9252b","sort":10003,"name":"architecture"}]}`);export{g as comp,v as data};
